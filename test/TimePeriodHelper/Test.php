<?php
namespace marshung\helperTest\TimePeriodHelper;

use marshung\helper\TimePeriodHelper;
use marshung\helperTest\tools\DevTools;

/**
 * Test for TimePeriodHelper
 * 
 * @author Mars Hung <tfaredxj@gmail.com>
 *
 */
class Test
{

    /**
     * Construct
     */
    public function __construct()
    {}

    /**
     * *********************************************
     * ************** Public Function **************
     * *********************************************
     */
    
    /**
     * Test Sort
     *
     * @param string $detail
     */
    public static function testSort($detail = false)
    {
        $templete = self::testSortData();
        $expected = self::testSortExpected();
        
        $result = TimePeriodHelper::sort($templete);
        
        $theSame = DevTools::theSame($result, $expected, $detail);
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    /**
     * Test Union
     *
     * @param string $detail
     */
    public static function testUnion($detail = false)
    {
        $templete1 = self::testUnionData1();
        $templete2 = self::testUnionData2();
        $expected = self::testUnionExpected();
        
        $result = TimePeriodHelper::union($templete1, $templete2);
        
        $theSame = DevTools::theSame($result, $expected, $detail);
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    /**
     * Test Diff
     *
     * @param string $detail
     */
    public static function testDiff($detail = false)
    {
        $templete1 = self::testDiffData1();
        $templete2 = self::testDiffData2();
        $expected = self::testDiffExpected();
        
        $result = TimePeriodHelper::diff($templete1, $templete2);
        
        $theSame = DevTools::theSame($result, $expected, $detail);
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    /**
     * Test Intersect
     *
     * @param string $detail
     */
    public static function testIntersect($detail = false)
    {
        $templete1 = self::testIntersectData1();
        $templete2 = self::testIntersectData2();
        $expected = self::testIntersectExpected();
        
        $result = TimePeriodHelper::intersect($templete1, $templete2);
        
        $theSame = DevTools::theSame($result, $expected, $detail);
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    /**
     * Test IsOverlap
     *
     * @param string $detail
     */
    public static function testIsOverlap($detail = false)
    {
        $templete1 = self::testIsOverlapData1();
        $templete2 = self::testIsOverlapData2();
        $expected = self::testIsOverlapExpected();
        
        $theSame = true;
        foreach ($templete1 as $k1 => $v1) {
            $result = TimePeriodHelper::isOverlap($templete1[$k1], $templete2[$k1]);
            $theSame = $theSame && DevTools::theSame($result, $expected[$k1], $detail);
        }
        
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    /**
     * Test Fill
     * 
     * @param string $detail
     */
    public static function testFill($detail = false)
    {
        $templete = self::testFillData();
        $expected = self::testFillExpected();
        
        $result = TimePeriodHelper::fill($templete);
        
        $theSame = DevTools::theSame($result, $expected, $detail);
        DevTools::isTheSame($theSame, __FUNCTION__);
    }
    
    
    
    
    /**
     * ****************************************************
     * ************** Data Templete Function **************
     * ****************************************************
     */
    
    /**
     * Test Data - Sort
     * @return array
     */
    public static function testSortData()
    {
        return [
            ['2019-01-04 12:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 08:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 17:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 19:00:00'],
            ['2019-01-04 08:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 09:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 07:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 10:00:00','2019-01-04 16:00:00'],
            ['2019-01-04 11:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 10:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 11:00:00','2019-01-04 15:00:00']
        ];
    }
    
    /**
     * Expected Data - Sort
     * @return array
     */
    public static function testSortExpected()
    {
        return [
            ['2019-01-04 07:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 08:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 08:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 09:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 10:00:00','2019-01-04 16:00:00'],
            ['2019-01-04 10:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 11:00:00','2019-01-04 15:00:00'],
            ['2019-01-04 11:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 17:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 19:00:00']
        ];
    }
    
    /**
     * Test Data - Union
     * @return array
     */
    public static function testUnionData1()
    {
        return [
            ['2019-01-04 10:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 13:00:00','2019-01-04 15:00:00'],
            ['2019-01-04 15:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 19:00:00','2019-01-04 22:00:00']
        ];
    }
    
    /**
     * Test Data - Union
     * @return array
     */
    public static function testUnionData2()
    {
        return [
            ['2019-01-04 08:00:00','2019-01-04 09:00:00'],
            ['2019-01-04 14:00:00','2019-01-04 16:00:00'],
            ['2019-01-04 21:00:00','2019-01-04 23:00:00']
        ];
    }
    
    /**
     * Expected Data - Union
     * @return array
     */
    public static function testUnionExpected()
    {
        return [
            ['2019-01-04 08:00:00','2019-01-04 09:00:00'],
            ['2019-01-04 10:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 13:00:00','2019-01-04 18:00:00'],
            ['2019-01-04 19:00:00','2019-01-04 23:00:00']
        ];
    }
    
    /**
     * Test Data - Diff
     * @return array
     */
    public static function testDiffData1()
    {
        return [
            // 1
            ['2019-01-01 01:00:00','2019-01-01 02:00:00'],
            ['2019-01-02 01:00:00','2019-01-02 02:00:00'],
            // 2
            ['2019-01-03 01:00:00','2019-01-03 02:00:00'],
            ['2019-01-04 01:00:00','2019-01-04 02:00:00'],
            // 3
            ['2019-01-04 03:00:00','2019-01-04 04:00:00'],
            ['2019-01-04 05:00:00','2019-01-04 06:00:00'],
            // 4
            ['2019-01-04 07:00:00','2019-01-04 08:00:00'],
            // 5
            ['2019-01-04 09:00:00','2019-01-04 10:00:00'],
            ['2019-01-04 11:00:00','2019-01-04 12:00:00'],
            // 6
            ['2019-01-04 13:00:00','2019-01-04 14:00:00'],
            ['2019-01-04 15:00:00','2019-01-04 16:00:00'],
            // Multiple processing
            ['2019-01-04 17:00:00','2019-01-04 20:00:00'],
            // Multiple processing - cross time
            ['2019-01-04 21:00:00','2019-01-04 21:40:00'],
            ['2019-01-04 21:20:00','2019-01-04 22:00:00'],
            ['2019-01-04 22:30:00','2019-01-04 23:00:00'],
            
        ];
    }
    
    /**
     * Test Data - Diff
     * @return array
     */
    public static function testDiffData2()
    {
        return [
            // 1
            ['2019-01-01 00:30:00','2019-01-01 00:59:59'],
            ['2019-01-02 00:30:00','2019-01-02 01:00:00'],
            // 2
            ['2019-01-03 02:00:00','2019-01-03 02:30:00'],
            ['2019-01-04 02:00:01','2019-01-04 02:30:00'],
            // 3
            ['2019-01-04 03:00:00','2019-01-04 04:00:00'],
            ['2019-01-04 04:50:00','2019-01-04 06:00:01'],
            // 4
            ['2019-01-04 07:30:00','2019-01-04 07:40:00'],
            // 5
            ['2019-01-04 09:30:00','2019-01-04 10:00:00'],
            ['2019-01-04 11:30:00','2019-01-04 12:00:01'],
            // 6
            ['2019-01-04 13:00:00','2019-01-04 13:30:00'],
            ['2019-01-04 14:50:00','2019-01-04 15:30:00'],
            // Multiple processing
            ['2019-01-04 17:30:00','2019-01-04 18:00:00'],
            ['2019-01-04 18:30:00','2019-01-04 19:00:00'],
            ['2019-01-04 19:30:00','2019-01-04 20:30:00'],
            // Multiple processing - cross time
            ['2019-01-04 21:30:00','2019-01-04 22:50:00'],
        ];
    }
    
    /**
     * Expected Data - Diff
     * @return array
     */
    public static function testDiffExpected()
    {
        return [
            // 1
            ['2019-01-01 01:00:00','2019-01-01 02:00:00'],
            ['2019-01-02 01:00:00','2019-01-02 02:00:00'],
            // 2
            ['2019-01-03 01:00:00','2019-01-03 02:00:00'],
            ['2019-01-04 01:00:00','2019-01-04 02:00:00'],
            // 4
            ['2019-01-04 07:00:00','2019-01-04 07:30:00'],
            ['2019-01-04 07:40:00','2019-01-04 08:00:00'],
            // 5
            ['2019-01-04 09:00:00','2019-01-04 09:30:00'],
            ['2019-01-04 11:00:00','2019-01-04 11:30:00'],
            // 6
            ['2019-01-04 13:30:00','2019-01-04 14:00:00'],
            ['2019-01-04 15:30:00','2019-01-04 16:00:00'],
            // Multiple processing
            ['2019-01-04 17:00:00','2019-01-04 17:30:00'],
            ['2019-01-04 18:00:00','2019-01-04 18:30:00'],
            ['2019-01-04 19:00:00','2019-01-04 19:30:00'],
            // Multiple processing - cross time
            ['2019-01-04 21:00:00','2019-01-04 21:30:00'],
            ['2019-01-04 22:50:00','2019-01-04 23:00:00'],
        ];
    }
    
    /**
     * Test Data - Intersect
     * @return array
     */
    public static function testIntersectData1()
    {
        return [
            // 1
            ['2019-01-01 01:00:00','2019-01-01 02:00:00'],
            ['2019-01-02 01:00:00','2019-01-02 02:00:00'],
            // 2
            ['2019-01-03 01:00:00','2019-01-03 02:00:00'],
            ['2019-01-04 01:00:00','2019-01-04 02:00:00'],
            // 3
            ['2019-01-04 03:00:00','2019-01-04 04:00:00'],
            ['2019-01-04 05:00:00','2019-01-04 06:00:00'],
            // 4
            ['2019-01-04 07:00:00','2019-01-04 08:00:00'],
            // 5
            ['2019-01-04 09:00:00','2019-01-04 10:00:00'],
            ['2019-01-04 11:00:00','2019-01-04 12:00:00'],
            // 6
            ['2019-01-04 13:00:00','2019-01-04 14:00:00'],
            ['2019-01-04 15:00:00','2019-01-04 16:00:00'],
            // Multiple processing
            ['2019-01-04 17:00:00','2019-01-04 20:00:00'],
            // Multiple processing - cross time
            ['2019-01-04 21:00:00','2019-01-04 21:40:00'],
            ['2019-01-04 21:20:00','2019-01-04 22:00:00'],
            ['2019-01-04 22:30:00','2019-01-04 23:00:00'],
        ];
    }
    
    /**
     * Test Data - Intersect
     * @return array
     */
    public static function testIntersectData2()
    {
        return [
            // 1
            ['2019-01-01 00:30:00','2019-01-01 00:59:59'],
            ['2019-01-02 00:30:00','2019-01-02 01:00:00'],
            // 2
            ['2019-01-03 02:00:00','2019-01-03 02:30:00'],
            ['2019-01-04 02:00:01','2019-01-04 02:30:00'],
            // 3
            ['2019-01-04 03:00:00','2019-01-04 04:00:00'],
            ['2019-01-04 04:50:00','2019-01-04 06:00:01'],
            // 4
            ['2019-01-04 07:30:00','2019-01-04 07:40:00'],
            // 5
            ['2019-01-04 09:30:00','2019-01-04 10:00:00'],
            ['2019-01-04 11:30:00','2019-01-04 12:00:01'],
            // 6
            ['2019-01-04 13:00:00','2019-01-04 13:30:00'],
            ['2019-01-04 14:50:00','2019-01-04 15:30:00'],
            // Multiple processing
            ['2019-01-04 17:30:00','2019-01-04 18:00:00'],
            ['2019-01-04 18:30:00','2019-01-04 19:00:00'],
            ['2019-01-04 19:30:00','2019-01-04 20:30:00'],
            // Multiple processing - cross time
            ['2019-01-04 21:30:00','2019-01-04 22:50:00'],
        ];
    }
    
    /**
     * Expected Data - Intersect
     * @return array
     */
    public static function testIntersectExpected()
    {
        return [
            // 3
            ['2019-01-04 03:00:00','2019-01-04 04:00:00'],
            ['2019-01-04 05:00:00','2019-01-04 06:00:00'],
            // 4
            ['2019-01-04 07:30:00','2019-01-04 07:40:00'],
            // 5
            ['2019-01-04 09:30:00','2019-01-04 10:00:00'],
            ['2019-01-04 11:30:00','2019-01-04 12:00:00'],
            // 6
            ['2019-01-04 13:00:00','2019-01-04 13:30:00'],
            ['2019-01-04 15:00:00','2019-01-04 15:30:00'],
            // Multiple processing
            ['2019-01-04 17:30:00','2019-01-04 18:00:00'],
            ['2019-01-04 18:30:00','2019-01-04 19:00:00'],
            ['2019-01-04 19:30:00','2019-01-04 20:00:00'],
            // Multiple processing - cross time
            ['2019-01-04 21:30:00','2019-01-04 22:00:00'],
            ['2019-01-04 22:30:00','2019-01-04 22:50:00'],
        ];
    }
    
    /**
     * Test Data - IsOverlap
     * @return array
     */
    public static function testIsOverlapData1()
    {
        return [
            // 1
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 2
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 3
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 4
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 5
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 6
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 7
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 8
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 9
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 10
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 11
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
        ];
    }
    
    /**
     * Test Data - IsOverlap
     * @return array
     */
    public static function testIsOverlapData2()
    {
        return [
            // 1
            [['2019-01-04 07:00:00','2019-01-04 08:00:00']],
            // 2
            [['2019-01-04 07:00:00','2019-01-04 07:59:59']],
            // 3
            [['2019-01-04 12:00:00','2019-01-04 13:00:00']],
            // 4
            [['2019-01-04 12:00:01','2019-01-04 13:00:00']],
            // 5
            [['2019-01-04 08:00:00','2019-01-04 12:00:00']],
            // 6
            [['2019-01-04 07:00:00','2019-01-04 13:00:00']],
            // 7
            [['2019-01-04 09:00:00','2019-01-04 11:00:00']],
            // 8
            [['2019-01-04 07:00:00','2019-01-04 10:00:00']],
            // 9
            [['2019-01-04 07:00:00','2019-01-04 12:00:00']],
            // 10
            [['2019-01-04 08:00:00','2019-01-04 13:00:00']],
            // 11
            [['2019-01-04 09:00:00','2019-01-04 13:00:00']],
        ];
    }
    
    /**
     * Expected Data - IsOverlap
     * @return array
     */
    public static function testIsOverlapExpected()
    {
        return [false,false,false,false,true,true,true,true,true,true,true];
    }
    
    /**
     * Test Data - Fill
     * @return array
     */
    public static function testFillData()
    {
        return [
            ['2019-01-04 08:00:00','2019-01-04 12:00:00'],
            ['2019-01-04 10:00:00','2019-01-04 19:00:00'],
            ['2019-01-04 12:00:00','2019-01-04 18:00:00']
        ];
    }
    
    /**
     * Expected Data - Fill
     * @return array
     */
    public static function testFillExpected()
    {
        return [
            ['2019-01-04 08:00:00','2019-01-04 19:00:00'],
        ];
    }

}